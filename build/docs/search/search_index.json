{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ScriptUI Dialog Builder \u00b6 Webapp (SDB): https://scriptui.joonas.me Github: https://github.com/joonaspaakko/ScriptUI-Dialog-Builder-Joonas Github issues: https://github.com/joonaspaakko/ScriptUI-Dialog-Builder-Joonas/issues CEP documentation: https://scriptui.joonas.me/docs/CEP-export/getting-started/ SDB's general documentation is pretty thin at the moment and lives at Github wiki . I may put them here later. Info This documentation you are reading right now also lives in the source and build folders of the git repo .","title":"SDB"},{"location":"#scriptui-dialog-builder","text":"Webapp (SDB): https://scriptui.joonas.me Github: https://github.com/joonaspaakko/ScriptUI-Dialog-Builder-Joonas Github issues: https://github.com/joonaspaakko/ScriptUI-Dialog-Builder-Joonas/issues CEP documentation: https://scriptui.joonas.me/docs/CEP-export/getting-started/ SDB's general documentation is pretty thin at the moment and lives at Github wiki . I may put them here later. Info This documentation you are reading right now also lives in the source and build folders of the git repo .","title":"ScriptUI Dialog Builder"},{"location":"CEP-export/dropdownlist/","text":"Dropdownlist \u00b6 Methods \u00b6 select() \u00b6 SDB . Dropdownlist . select ( element , index ); // Selects an item using its index SDB . Dropdownlist . select ( element , string ); // Selects an item using a string selection() \u00b6 SDB . Dropdownlist . selection . index ( element ); // returns select items index SDB . Dropdownlist . selection . text ( element ); // returns selected items text SDB . Dropdownlist . selection . value ( element ); // Same as the function above add() \u00b6 SDB . Dropdownlist . add ( element , text ); // Appends a new item remove() \u00b6 SDB . Dropdownlist . remove ( element , index ); // Removes an item using its index SDB . Dropdownlist . remove ( element , string ); // Removes an item using a string empty() \u00b6 SDB . Dropdownlist . empty ( element ); // Empties the whole dropdownlist onSelect eventListener \u00b6 element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . target ); console . log ( e . detail ); }); Real world examples \u00b6 Append a new item \u00b6 SDB . Dropdownlist . add ( SDB . id ( 1 ), \"New item\" ); Select an item \u00b6 SDB . Dropdownlist . select ( SDB . id ( 1 ), 2 ); Remove item with a specific text \u00b6 SDB . Dropdownlist . select ( SDB . id ( 1 ), \"Example string\" ); Get text from the selected item \u00b6 var selectedString = SDB . Dropdownlist . selection . text ( SDB . id ( 1 ) ); Empty and repopulate \u00b6 var targetDropdown = SDB . id ( 1 ); var newItems = [ 'New item 1' , 'New item 2' , 'New item 3' ]; SDB . Dropdownlist . empty ( targetDropdown ); for ( var i = 0 ; i < newItems . length ; i ++ ) { SDB . Dropdownlist . add ( targetDropdown , newItems [ i ] ); } Event listener fun \u00b6 Example where we wait for the user to select dropdownlist item with the text Center and then check a radio button in response and stop listening for more. var dropdown1 = SDB . id ( 1 ); var uncheckRadio2 = function ( e ) { if ( e . detail . selection . text === 'Center' ) { SDB . Radiocheck . check ( SDB . id ( 2 ) ); dropdown . removeEventListener ( \"onSelect\" , uncheckRadio2 ); } }; dropdown . addEventListener ( \"onSelect\" , uncheckRadio2 ); Mirror dropdowns \u00b6 Mirror the selection of dropdown1 with dropdown2 var dropdown1 = SDB . id ( 1 ); var dropdown2 = SDB . id ( 2 ); var mirrorDropdowns = function ( e ) { var target = e . target === dropdown1 ? dropdown2 : dropdown1 ; SDB . Dropdownlist . select ( target , e . detail . selection . index ); } dropdown1 . addEventListener ( \"onSelect\" , mirrorDropdowns ); dropdown2 . addEventListener ( \"onSelect\" , mirrorDropdowns ); Disable if conditions are met \u00b6 Disable a specific element if item number 2 (index 1) is selected in a dropdownlist var dropdown = SDB . id ( 1 ); var disableThis = SDB . id ( 2 ); dropdown . addEventListener ( \"onSelect\" , function ( e ) { var changeState = ( e . detail . selection . index === 1 ) ? 'disable' : 'enable' ; SDB [ changeState ]. element ( disableThis ); }); Dropdownlist HTML structure: \u00b6 The HTML might be slightly cleaned up to make it easier to to read. < div class = \"dropdownlist\" data-item-type = \"dropdownlist\" data-item-id = \"23\" data-item-parent-id = \"21\" > < label > Droplist text </ label > < div class = \"drop-list-wrap\" > < div class = \"items\" > < div class = \"selected\" > Top Left </ div > < div class = \"horizontal-line\" > - </ div > </ div > < div class = \"arrow\" >< svg ></ svg ></ div > </ div > </ div >","title":"Dropdownlist"},{"location":"CEP-export/dropdownlist/#dropdownlist","text":"","title":"Dropdownlist"},{"location":"CEP-export/dropdownlist/#methods","text":"","title":"Methods"},{"location":"CEP-export/dropdownlist/#select","text":"SDB . Dropdownlist . select ( element , index ); // Selects an item using its index SDB . Dropdownlist . select ( element , string ); // Selects an item using a string","title":"select()"},{"location":"CEP-export/dropdownlist/#selection","text":"SDB . Dropdownlist . selection . index ( element ); // returns select items index SDB . Dropdownlist . selection . text ( element ); // returns selected items text SDB . Dropdownlist . selection . value ( element ); // Same as the function above","title":"selection()"},{"location":"CEP-export/dropdownlist/#add","text":"SDB . Dropdownlist . add ( element , text ); // Appends a new item","title":"add()"},{"location":"CEP-export/dropdownlist/#remove","text":"SDB . Dropdownlist . remove ( element , index ); // Removes an item using its index SDB . Dropdownlist . remove ( element , string ); // Removes an item using a string","title":"remove()"},{"location":"CEP-export/dropdownlist/#empty","text":"SDB . Dropdownlist . empty ( element ); // Empties the whole dropdownlist","title":"empty()"},{"location":"CEP-export/dropdownlist/#onselect-eventlistener","text":"element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . target ); console . log ( e . detail ); });","title":"onSelect eventListener"},{"location":"CEP-export/dropdownlist/#real-world-examples","text":"","title":"Real world examples"},{"location":"CEP-export/dropdownlist/#append-a-new-item","text":"SDB . Dropdownlist . add ( SDB . id ( 1 ), \"New item\" );","title":"Append a new item"},{"location":"CEP-export/dropdownlist/#select-an-item","text":"SDB . Dropdownlist . select ( SDB . id ( 1 ), 2 );","title":"Select an item"},{"location":"CEP-export/dropdownlist/#remove-item-with-a-specific-text","text":"SDB . Dropdownlist . select ( SDB . id ( 1 ), \"Example string\" );","title":"Remove item with a specific text"},{"location":"CEP-export/dropdownlist/#get-text-from-the-selected-item","text":"var selectedString = SDB . Dropdownlist . selection . text ( SDB . id ( 1 ) );","title":"Get text from the selected item"},{"location":"CEP-export/dropdownlist/#empty-and-repopulate","text":"var targetDropdown = SDB . id ( 1 ); var newItems = [ 'New item 1' , 'New item 2' , 'New item 3' ]; SDB . Dropdownlist . empty ( targetDropdown ); for ( var i = 0 ; i < newItems . length ; i ++ ) { SDB . Dropdownlist . add ( targetDropdown , newItems [ i ] ); }","title":"Empty and repopulate"},{"location":"CEP-export/dropdownlist/#event-listener-fun","text":"Example where we wait for the user to select dropdownlist item with the text Center and then check a radio button in response and stop listening for more. var dropdown1 = SDB . id ( 1 ); var uncheckRadio2 = function ( e ) { if ( e . detail . selection . text === 'Center' ) { SDB . Radiocheck . check ( SDB . id ( 2 ) ); dropdown . removeEventListener ( \"onSelect\" , uncheckRadio2 ); } }; dropdown . addEventListener ( \"onSelect\" , uncheckRadio2 );","title":"Event listener fun"},{"location":"CEP-export/dropdownlist/#mirror-dropdowns","text":"Mirror the selection of dropdown1 with dropdown2 var dropdown1 = SDB . id ( 1 ); var dropdown2 = SDB . id ( 2 ); var mirrorDropdowns = function ( e ) { var target = e . target === dropdown1 ? dropdown2 : dropdown1 ; SDB . Dropdownlist . select ( target , e . detail . selection . index ); } dropdown1 . addEventListener ( \"onSelect\" , mirrorDropdowns ); dropdown2 . addEventListener ( \"onSelect\" , mirrorDropdowns );","title":"Mirror dropdowns"},{"location":"CEP-export/dropdownlist/#disable-if-conditions-are-met","text":"Disable a specific element if item number 2 (index 1) is selected in a dropdownlist var dropdown = SDB . id ( 1 ); var disableThis = SDB . id ( 2 ); dropdown . addEventListener ( \"onSelect\" , function ( e ) { var changeState = ( e . detail . selection . index === 1 ) ? 'disable' : 'enable' ; SDB [ changeState ]. element ( disableThis ); });","title":"Disable if conditions are met"},{"location":"CEP-export/dropdownlist/#dropdownlist-html-structure","text":"The HTML might be slightly cleaned up to make it easier to to read. < div class = \"dropdownlist\" data-item-type = \"dropdownlist\" data-item-id = \"23\" data-item-parent-id = \"21\" > < label > Droplist text </ label > < div class = \"drop-list-wrap\" > < div class = \"items\" > < div class = \"selected\" > Top Left </ div > < div class = \"horizontal-line\" > - </ div > </ div > < div class = \"arrow\" >< svg ></ svg ></ div > </ div > </ div >","title":"Dropdownlist HTML structure:"},{"location":"CEP-export/getting-started/","text":"Getting Started \u00b6 Usage \u00b6 After you turn on the CEP export, there's not much to it: Export the code Paste to your CEP HTML file I strongly advice to turn off word wrap in your editor, because the CSS and JS take up a lot of space. Unless of course you choose to link the files instead. You're good to go. Just make sure the JS and CSS is included. Theme Manager Automatic theme switching is built in, but it needsto be triggered manually. Read more at Theme Manager . The HTML obviously changes every single time you make changes in SDB, but the JS and CSS will not change very often if at all. So you may way to export HTML only after the first export. You'll likely want to put the JS file above your own Javascript. CSS isn't that picky. The required CSS and JS files \u00b6 By default the export will include HTML + CSS & JS , but you can also export the HTML only. You can download the required CSS and JS files using these links. CSS: ScriptUI - Dialog - Builder - Joonas - master / build / assets / css / sdb . cep . css JS: ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / sdb . cep . js Uncompressed files? Both of the files listed above are minified for convenience/performance reasons. Here's paths where you can find the uncompressed files. JS ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / dialog . builder / sdb . cep / helper . functions . js has to be included if any of the other files are included and it has to be included first. They don't necessarily have to be compiled into one big file. You could just include them one by one. If you want, you don't have to include every single file, if you're not using all of these special items. CSS ScriptUI - Dialog - Builder - Joonas - master / build / assets / _sass / panels / 5 - dialog - preview . scss This is a SASS (SCSS) file, so it will have to be compliled to CSS before you can use it. You could use SASS Meister to do the conversion. Samples \u00b6 Link to SDB-to-CEP-samples . Offline use \u00b6 If you try to do an export locally without an internet connection, your export will not include anything but a mockup link to for the CSS and JS . The repository paths are: ScriptUI - Dialog - Builder - Joonas - master / build / assets / css / sdb . cep . css ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / sdb . cep . js Helper methods? \u00b6 The included javascript has bunch of helper methods that make it easier to for example add new items. That documentation starts from Helper functions in the left sidebar. Only some of the items have these helper functions since the others don't really need them. What about other items? I'm not planning to write a full library of commands for every single item. I strongly feel this is enough. I don't think it's necessary since this CEP export is part of SDB, so you can make the items there. But for example Dropdownlist has these helper methods because you can't populate it with data coming from the application or other outside sources in SDB. Plus you could spend a whole day trying to figure out how you can populate it. The premade add () method makes sure it functions without you having to Sherlock Holmes your way through the HTML/SDB to try and figure it out. With any of the other items you could fairly easily make the item in SDB, hide it and show it as is your want. The other option would be to just create the button using SDB, cut & paste from the HTML to your JS, store it in JS and plop it wherever you need it later. Of course, some data-attribute edits might be needed. Issues? \u00b6 The CEP export is very much an after thought and may suffer from that to a degree. Post your issues in Github .","title":"Getting Started"},{"location":"CEP-export/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"CEP-export/getting-started/#usage","text":"After you turn on the CEP export, there's not much to it: Export the code Paste to your CEP HTML file I strongly advice to turn off word wrap in your editor, because the CSS and JS take up a lot of space. Unless of course you choose to link the files instead. You're good to go. Just make sure the JS and CSS is included. Theme Manager Automatic theme switching is built in, but it needsto be triggered manually. Read more at Theme Manager . The HTML obviously changes every single time you make changes in SDB, but the JS and CSS will not change very often if at all. So you may way to export HTML only after the first export. You'll likely want to put the JS file above your own Javascript. CSS isn't that picky.","title":"Usage"},{"location":"CEP-export/getting-started/#the-required-css-and-js-files","text":"By default the export will include HTML + CSS & JS , but you can also export the HTML only. You can download the required CSS and JS files using these links. CSS: ScriptUI - Dialog - Builder - Joonas - master / build / assets / css / sdb . cep . css JS: ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / sdb . cep . js Uncompressed files? Both of the files listed above are minified for convenience/performance reasons. Here's paths where you can find the uncompressed files. JS ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / dialog . builder / sdb . cep / helper . functions . js has to be included if any of the other files are included and it has to be included first. They don't necessarily have to be compiled into one big file. You could just include them one by one. If you want, you don't have to include every single file, if you're not using all of these special items. CSS ScriptUI - Dialog - Builder - Joonas - master / build / assets / _sass / panels / 5 - dialog - preview . scss This is a SASS (SCSS) file, so it will have to be compliled to CSS before you can use it. You could use SASS Meister to do the conversion.","title":"The required CSS and JS files"},{"location":"CEP-export/getting-started/#samples","text":"Link to SDB-to-CEP-samples .","title":"Samples"},{"location":"CEP-export/getting-started/#offline-use","text":"If you try to do an export locally without an internet connection, your export will not include anything but a mockup link to for the CSS and JS . The repository paths are: ScriptUI - Dialog - Builder - Joonas - master / build / assets / css / sdb . cep . css ScriptUI - Dialog - Builder - Joonas - master / build / assets / js / sdb . cep . js","title":"Offline use"},{"location":"CEP-export/getting-started/#helper-methods","text":"The included javascript has bunch of helper methods that make it easier to for example add new items. That documentation starts from Helper functions in the left sidebar. Only some of the items have these helper functions since the others don't really need them. What about other items? I'm not planning to write a full library of commands for every single item. I strongly feel this is enough. I don't think it's necessary since this CEP export is part of SDB, so you can make the items there. But for example Dropdownlist has these helper methods because you can't populate it with data coming from the application or other outside sources in SDB. Plus you could spend a whole day trying to figure out how you can populate it. The premade add () method makes sure it functions without you having to Sherlock Holmes your way through the HTML/SDB to try and figure it out. With any of the other items you could fairly easily make the item in SDB, hide it and show it as is your want. The other option would be to just create the button using SDB, cut & paste from the HTML to your JS, store it in JS and plop it wherever you need it later. Of course, some data-attribute edits might be needed.","title":"Helper methods?"},{"location":"CEP-export/getting-started/#issues","text":"The CEP export is very much an after thought and may suffer from that to a degree. Post your issues in Github .","title":"Issues?"},{"location":"CEP-export/helper-functions/","text":"Helper functions \u00b6 Selector/data hooks \u00b6 Each SDB item has a few handy data attributes you can latch onto. Listbox items don't have any of these and Treeview items use data - tree - item - id , which are only unique within each treeview item. Data-attribute Description data-item-id IDs are unique, so this is likely your best when selecting items: [ data - item - id = \"1\" ] . \"Dialog\" is always 0. data-item-parent-id Parent items have a single child container .padding-box , that holds the children. data-item-type Typenames are straight from SUI, if possible. \"Divider\" for example is not a standard item, so it has an improvised name. All of these are case sensitive. data-item-name this is either automatically assigned on export and you can also override it using the properties panel's \"Custom variable name\" option. To easily check what these are for each item, you can use the SDB inspector to snoop around by hovering over items. More about SDB Inspector here . Warning! Item elements, which is to say any element that has the attribute data - item - id , contain the spacing in the form of a padding. So you may want to target a child element inside that in some cases. For example; if you attach a click event listener to the item element, the user could then click an empty to trigger the event. Selector methods \u00b6 To make selecting elements just a tiny bit easier, I added two helper functions for fetching one element or all matching elements. select() \u00b6 Selects first match. Same functionality as document . querySelector () . select ( 'div' ) selectAll() \u00b6 Selects an array of elements. Same functionality as [... document . querySelectorAll ()] . selectAll ( 'div' ) You can also use element , elementAll and pick , pickAll . Note that there are also SDB centric selector methods , which shorten the syntax a bit. More on those right after the usage examples below. Real world examples \u00b6 var dialog = select ( '#dialog' ); var item1 = select ( '[data-item-id=\"1\"]' ); Get all child items inside a parent. If you're doing something like this, you probably need to consider nesting and the fact that .padding-box is always between parent and its children. The SDB centric selector methods make it more simple though. var items = selectAll ( '[data-item-id=\"1\"] > .padding-box > [data-item-id]' ); Since every SDB item, which is to say element that has [ data - item - id ] also has [ data - item - parent - id ] , you could also fetch all children like this: var items = pickAll ( '[data-item-parent-id=\"31\"][data-item-id]' ); If you already have the parent stored as a variable, you may want to use : scope . You can't start querySelector with a child selector > , but you can pad that with : scope . var parent = select ( '[data-item-id=\"1\"]' ); var items = selectAll ( ':scope > .padding-box > [data-item-id]' , parent ); This snippet selects all elements where the data - item - name attribute starts with button . selectAll ( '[data-item-name^=\"button\"]' ); SBD specific selector methods \u00b6 I added these methods too, since data-attributes can be a bit beefy to type. I wanted to keep these short so the method names might not be super descriptive... At the moment these methods will not select a tree - item - id . For those, use the longer select ( '[data-item-name=\"myTreeView\"] > .padding-box > [data-tree-item-id=\"5\"]' ); . Same thing applies to the parentID parameter with these methods. Use something like: select ( '[data-tree-item-id=\"2\"] > .padding-box > [data-tree-item-id=\"3\"]' ); . id() \u00b6 Returns an item with the given id SDB . id ( childId , 'parentName' ) SDB . id ( childId , parentId ) name() \u00b6 Returns an item with the given name SDB . name ( 'cildName' , 'parentName' ) SDB . name ( 'cildName' , parentId ) typeAll() \u00b6 Returns all items with the given type. SDB . typeAll ( 'childType' , 'parentName' ) SDB . typeAll ( 'childType' , parentId ) With these methods, parent is always the direct parent. This is the same as doing document . selector ( '[data-item-id=\"1\"] > .padding-box > [data-item-id=\"2\"]' ) . If you want to find other nested child items, you might want to use select ( '[data-item-id=\"2\"]' , parent ); . If these selector methods don't give you what you want, you can always fall back to using select () and selectAll () or even document . querySelector . Real world examples \u00b6 Just like with the general selector functions, you can define a parent like this: var item1insideItem2 = SDB . id ( 2 , 1 ); // Verbose version of the same thing: var parentID = 1 ; var childID = 2 ; var checkbox = SDB . id ( childID , parentID ); Get all StaticText items inside parent with the id 1 . var statictexts = SDB . typeAll ( 'StaticText' , 1 ); The name is automatically assigned by SDB, unless you give it in the item properties panel \u2192 Custom Variable Name var panelBtns = SDB . typeAll ( 'Button' , 'rightSidePanel' ); Get element George inside parent rightSidePanel . var george = SDB . name ( 'George' , 'rightSidePanel' ); Disabling and enabling items \u00b6 The disabled element will be grayed out and most interactivity is disabled. For example, a button can't be clicked and edittext can't be edited but static items, such as Statictext are simply grayed out. Warning Should be worth a mention that the disabling method is kinda crude. The workhorse here is just an invisible overlay that stops users from clicking the items. Though, in addition to that, Edittext items are made readonly as well. Another thing to note is that the overlay goes inside the element that has all the data-attributes, so if an element has data - item - id , for instance, you'll probably want to target the child item(s). disable() \u00b6 SDB . disable . id ( 1 ); SDB . disable . name ( 'itemName' ); // The custom variable name of an item SDB . disable . element ( element ); All of these methods take the same type of values as an array as well. enable() \u00b6 SDB . enable . id ( 1 ); SDB . enable . name ( 'itemName' ); // The custom variable name of an item SDB . enable . item ( element ); All of these methods take the same type of values as an array as well. Real world examples \u00b6 Didn't include any examples for enabling items since it works exactly the same as disable. Disable one element (different methods). SDB . disable . id ( 1 ); SDB . disable . name ( 'name1' ); SDB . disable . element ( SDB . id ( 1 ) ); Disable all items with these names (names are unique). SDB . disable . name ( [ 'name16' , 'name17' , 'name18' ] ); Disable all items with these ids (ids are unique). SDB . disable . id ( [ 1 , 2 , 3 ] ); Disable all items with the type \"statictext\". Type names are case sensitive... SDB . disable . element ( SDB . typeAll ( 'statictext' ) ); Disable all items where the name starts with 'button'. SDB . disable . element ( selectAll ( '[data-item-name^=\"button\"]' ) ); SDB Inspector \u00b6 SDB Inspector is a small info window that shows useful data when you hover over items. Use SDB . inspector (); Caveats You can't inspect nested items if the parent item is disabled. Groups can be a elusive, but at least you can inspect their child items, that will show what the parent id is. There's always the good old Chromedev tools inspection too, if you want to find out more. Warning Remember to comment out SDB . inspector (); when you are ready to deploy! Inspector properties Data-attribute Suggested usage More info Type [ data - item - type ] SDB . typeAll ( 'checkbox' ); All types are lowercase. These type names primarily come from SUI, but there are exceptions, like divider , which is not a SUI item. Incidentally they are the same as the item names in the SDB\u2019s \u201cAdd items\u201c panel. ID [ data - item - id ] SDB . id ( 1 ); With a few exceptions, generally all items have an ID given by SDB. There are also generally unique. There is also data - tree - item - id , which is only unique in the scope of it\u2019s parent treeview. Parent ID [ data - item - parent - id ] SDB . parentId ( 'checkbox' ); Same idea as above. Dialog item doesn\u2019t have a parent. Name [ data - item - name ] SDB . name ( 'Charles' ); Automatically generated by SDB on export. You can give a custom name using the Custom Variable Name input in the Properties panel in SDB. Suggested usage? \u00b6 These are all just shorthand methods. Read more here if you skipped that section: SDB specific selector methods . If these methods don\u2019t do what you need, you can fallback to the provided: Selector methods or their vanilla JS equivalent methods document . querySelector () or [... document . querySelectorAll ()] .","title":"Helper functions"},{"location":"CEP-export/helper-functions/#helper-functions","text":"","title":"Helper functions"},{"location":"CEP-export/helper-functions/#selectordata-hooks","text":"Each SDB item has a few handy data attributes you can latch onto. Listbox items don't have any of these and Treeview items use data - tree - item - id , which are only unique within each treeview item. Data-attribute Description data-item-id IDs are unique, so this is likely your best when selecting items: [ data - item - id = \"1\" ] . \"Dialog\" is always 0. data-item-parent-id Parent items have a single child container .padding-box , that holds the children. data-item-type Typenames are straight from SUI, if possible. \"Divider\" for example is not a standard item, so it has an improvised name. All of these are case sensitive. data-item-name this is either automatically assigned on export and you can also override it using the properties panel's \"Custom variable name\" option. To easily check what these are for each item, you can use the SDB inspector to snoop around by hovering over items. More about SDB Inspector here . Warning! Item elements, which is to say any element that has the attribute data - item - id , contain the spacing in the form of a padding. So you may want to target a child element inside that in some cases. For example; if you attach a click event listener to the item element, the user could then click an empty to trigger the event.","title":"Selector/data hooks"},{"location":"CEP-export/helper-functions/#selector-methods","text":"To make selecting elements just a tiny bit easier, I added two helper functions for fetching one element or all matching elements.","title":"Selector methods"},{"location":"CEP-export/helper-functions/#select","text":"Selects first match. Same functionality as document . querySelector () . select ( 'div' )","title":"select()"},{"location":"CEP-export/helper-functions/#selectall","text":"Selects an array of elements. Same functionality as [... document . querySelectorAll ()] . selectAll ( 'div' ) You can also use element , elementAll and pick , pickAll . Note that there are also SDB centric selector methods , which shorten the syntax a bit. More on those right after the usage examples below.","title":"selectAll()"},{"location":"CEP-export/helper-functions/#real-world-examples","text":"var dialog = select ( '#dialog' ); var item1 = select ( '[data-item-id=\"1\"]' ); Get all child items inside a parent. If you're doing something like this, you probably need to consider nesting and the fact that .padding-box is always between parent and its children. The SDB centric selector methods make it more simple though. var items = selectAll ( '[data-item-id=\"1\"] > .padding-box > [data-item-id]' ); Since every SDB item, which is to say element that has [ data - item - id ] also has [ data - item - parent - id ] , you could also fetch all children like this: var items = pickAll ( '[data-item-parent-id=\"31\"][data-item-id]' ); If you already have the parent stored as a variable, you may want to use : scope . You can't start querySelector with a child selector > , but you can pad that with : scope . var parent = select ( '[data-item-id=\"1\"]' ); var items = selectAll ( ':scope > .padding-box > [data-item-id]' , parent ); This snippet selects all elements where the data - item - name attribute starts with button . selectAll ( '[data-item-name^=\"button\"]' );","title":"Real world examples"},{"location":"CEP-export/helper-functions/#sbd-specific-selector-methods","text":"I added these methods too, since data-attributes can be a bit beefy to type. I wanted to keep these short so the method names might not be super descriptive... At the moment these methods will not select a tree - item - id . For those, use the longer select ( '[data-item-name=\"myTreeView\"] > .padding-box > [data-tree-item-id=\"5\"]' ); . Same thing applies to the parentID parameter with these methods. Use something like: select ( '[data-tree-item-id=\"2\"] > .padding-box > [data-tree-item-id=\"3\"]' ); .","title":"SBD specific selector methods"},{"location":"CEP-export/helper-functions/#id","text":"Returns an item with the given id SDB . id ( childId , 'parentName' ) SDB . id ( childId , parentId )","title":"id()"},{"location":"CEP-export/helper-functions/#name","text":"Returns an item with the given name SDB . name ( 'cildName' , 'parentName' ) SDB . name ( 'cildName' , parentId )","title":"name()"},{"location":"CEP-export/helper-functions/#typeall","text":"Returns all items with the given type. SDB . typeAll ( 'childType' , 'parentName' ) SDB . typeAll ( 'childType' , parentId ) With these methods, parent is always the direct parent. This is the same as doing document . selector ( '[data-item-id=\"1\"] > .padding-box > [data-item-id=\"2\"]' ) . If you want to find other nested child items, you might want to use select ( '[data-item-id=\"2\"]' , parent ); . If these selector methods don't give you what you want, you can always fall back to using select () and selectAll () or even document . querySelector .","title":"typeAll()"},{"location":"CEP-export/helper-functions/#real-world-examples_1","text":"Just like with the general selector functions, you can define a parent like this: var item1insideItem2 = SDB . id ( 2 , 1 ); // Verbose version of the same thing: var parentID = 1 ; var childID = 2 ; var checkbox = SDB . id ( childID , parentID ); Get all StaticText items inside parent with the id 1 . var statictexts = SDB . typeAll ( 'StaticText' , 1 ); The name is automatically assigned by SDB, unless you give it in the item properties panel \u2192 Custom Variable Name var panelBtns = SDB . typeAll ( 'Button' , 'rightSidePanel' ); Get element George inside parent rightSidePanel . var george = SDB . name ( 'George' , 'rightSidePanel' );","title":"Real world examples"},{"location":"CEP-export/helper-functions/#disabling-and-enabling-items","text":"The disabled element will be grayed out and most interactivity is disabled. For example, a button can't be clicked and edittext can't be edited but static items, such as Statictext are simply grayed out. Warning Should be worth a mention that the disabling method is kinda crude. The workhorse here is just an invisible overlay that stops users from clicking the items. Though, in addition to that, Edittext items are made readonly as well. Another thing to note is that the overlay goes inside the element that has all the data-attributes, so if an element has data - item - id , for instance, you'll probably want to target the child item(s).","title":"Disabling and enabling items"},{"location":"CEP-export/helper-functions/#disable","text":"SDB . disable . id ( 1 ); SDB . disable . name ( 'itemName' ); // The custom variable name of an item SDB . disable . element ( element ); All of these methods take the same type of values as an array as well.","title":"disable()"},{"location":"CEP-export/helper-functions/#enable","text":"SDB . enable . id ( 1 ); SDB . enable . name ( 'itemName' ); // The custom variable name of an item SDB . enable . item ( element ); All of these methods take the same type of values as an array as well.","title":"enable()"},{"location":"CEP-export/helper-functions/#real-world-examples_2","text":"Didn't include any examples for enabling items since it works exactly the same as disable. Disable one element (different methods). SDB . disable . id ( 1 ); SDB . disable . name ( 'name1' ); SDB . disable . element ( SDB . id ( 1 ) ); Disable all items with these names (names are unique). SDB . disable . name ( [ 'name16' , 'name17' , 'name18' ] ); Disable all items with these ids (ids are unique). SDB . disable . id ( [ 1 , 2 , 3 ] ); Disable all items with the type \"statictext\". Type names are case sensitive... SDB . disable . element ( SDB . typeAll ( 'statictext' ) ); Disable all items where the name starts with 'button'. SDB . disable . element ( selectAll ( '[data-item-name^=\"button\"]' ) );","title":"Real world examples"},{"location":"CEP-export/helper-functions/#sdb-inspector","text":"SDB Inspector is a small info window that shows useful data when you hover over items. Use SDB . inspector (); Caveats You can't inspect nested items if the parent item is disabled. Groups can be a elusive, but at least you can inspect their child items, that will show what the parent id is. There's always the good old Chromedev tools inspection too, if you want to find out more. Warning Remember to comment out SDB . inspector (); when you are ready to deploy! Inspector properties Data-attribute Suggested usage More info Type [ data - item - type ] SDB . typeAll ( 'checkbox' ); All types are lowercase. These type names primarily come from SUI, but there are exceptions, like divider , which is not a SUI item. Incidentally they are the same as the item names in the SDB\u2019s \u201cAdd items\u201c panel. ID [ data - item - id ] SDB . id ( 1 ); With a few exceptions, generally all items have an ID given by SDB. There are also generally unique. There is also data - tree - item - id , which is only unique in the scope of it\u2019s parent treeview. Parent ID [ data - item - parent - id ] SDB . parentId ( 'checkbox' ); Same idea as above. Dialog item doesn\u2019t have a parent. Name [ data - item - name ] SDB . name ( 'Charles' ); Automatically generated by SDB on export. You can give a custom name using the Custom Variable Name input in the Properties panel in SDB.","title":"SDB Inspector"},{"location":"CEP-export/helper-functions/#suggested-usage","text":"These are all just shorthand methods. Read more here if you skipped that section: SDB specific selector methods . If these methods don\u2019t do what you need, you can fallback to the provided: Selector methods or their vanilla JS equivalent methods document . querySelector () or [... document . querySelectorAll ()] .","title":"Suggested usage?"},{"location":"CEP-export/listbox/","text":"Listbox \u00b6 Methods \u00b6 add() \u00b6 Added items are returned. Check the \"real world example\": Populate with an array SDB . Listbox . add ( element , 'string' ); // Or an array of strings remove() \u00b6 Remove item using indexes. This one doesn't take in arrays. SDB . Listbox . remove ( element , 1 ); empty() \u00b6 Target element should be the .list-box item and not its child items. SDB . Listbox . empty ( element ); toggle() \u00b6 Toggles the selection of an item with the specified index or text content. SDB . Listbox . toggle ( element , 1 ); SDB . Listbox . toggle ( element , 'string' ); select() \u00b6 Selects an item with the specified index or text content. SDB . Listbox . select ( element , 1 ); SDB . Listbox . select ( element , 'string' ); deselect() \u00b6 Deselects an item with the specified index or text content. SDB . Listbox . deselect ( element , 1 ); SDB . Listbox . deselect ( element , 'string' ); deselectAll() \u00b6 Deselects all items. Target element .list-box . SDB . Listbox . deselectAll ( element ); selection() \u00b6 Returns an array of indexes or item text content. SDB . Listbox . selection . index ( element ); SDB . Listbox . selection . text ( element ); onSelect eventlistener \u00b6 element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . detail ); }); Real world examples \u00b6 Add an item \u00b6 var listbox = SDB . id ( 1 ); var addedItems = SDB . Listbox . add ( listbox , [ 'Item 1' , 'Item 2' , 'Item 3' ] ); console . log ( addedItems ); Populate with an array \u00b6 var listbox = SDB . id ( 1 ); var addedItems = SDB . Listbox . add ( listbox , [ 'Item 1' , 'Item 2' , 'Item 3' ] ); console . log ( addedItems ); Select item if text is equal to \u00b6 SDB . Listbox . select ( SDB . id ( 1 ), 'Item 2' ); Fetch all selected items \u00b6 SDB . Listbox . selection . text ( SDB . id ( 1 ) ); Deselect all \u00b6 var listbox = SDB . id ( 1 ); SDB . Listbox . deselectAll ( listbox ); Select all items with the click of a button \u00b6 var listbox = SDB . id ( 1 ); var listboxItems = pickAll ( 'li' , listbox ); var button = SDB . id ( 2 ); button . addEventListener ( \"click\" , function () { for ( var item of listboxItems ) { item . classList . add ( 'selected' ); } }); How to disable listbox items? \u00b6 To disable listbox items, you need to get a bit tricky. You can't use SDB . disable . id or SDB . disable . name because Listbox items don't have either. Also there is no method for disabling with index. The only thing left is the SDB . disable . element () , which may also be difficult since they don't have any distinct hooks you can latch onto. The snippet below gets the element based on its index. If you're populating the listbox yourself, you could easily scatter around classes and/or data-attributes that you can target later on for disabling purposes or something else. This snippet disables the second item in the specified list. var listBox = SDB . id ( 1 ); var listItem2 = selectAll ( 'li' , listBox )[ 1 ]; SDB . disable . element ( listItem2 ); HTML structure \u00b6 The HTML might be slightly cleaned up to make it easier to to read. < div class = \"list-box\" data-item-type = \"listbox\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"inner-wrap\" > < ul > < li class = \"selected\" >< span > Item 1 </ span ></ li > < li >< span > Item 2 </ span ></ li > </ ul > </ div > </ div >","title":"Listbox"},{"location":"CEP-export/listbox/#listbox","text":"","title":"Listbox"},{"location":"CEP-export/listbox/#methods","text":"","title":"Methods"},{"location":"CEP-export/listbox/#add","text":"Added items are returned. Check the \"real world example\": Populate with an array SDB . Listbox . add ( element , 'string' ); // Or an array of strings","title":"add()"},{"location":"CEP-export/listbox/#remove","text":"Remove item using indexes. This one doesn't take in arrays. SDB . Listbox . remove ( element , 1 );","title":"remove()"},{"location":"CEP-export/listbox/#empty","text":"Target element should be the .list-box item and not its child items. SDB . Listbox . empty ( element );","title":"empty()"},{"location":"CEP-export/listbox/#toggle","text":"Toggles the selection of an item with the specified index or text content. SDB . Listbox . toggle ( element , 1 ); SDB . Listbox . toggle ( element , 'string' );","title":"toggle()"},{"location":"CEP-export/listbox/#select","text":"Selects an item with the specified index or text content. SDB . Listbox . select ( element , 1 ); SDB . Listbox . select ( element , 'string' );","title":"select()"},{"location":"CEP-export/listbox/#deselect","text":"Deselects an item with the specified index or text content. SDB . Listbox . deselect ( element , 1 ); SDB . Listbox . deselect ( element , 'string' );","title":"deselect()"},{"location":"CEP-export/listbox/#deselectall","text":"Deselects all items. Target element .list-box . SDB . Listbox . deselectAll ( element );","title":"deselectAll()"},{"location":"CEP-export/listbox/#selection","text":"Returns an array of indexes or item text content. SDB . Listbox . selection . index ( element ); SDB . Listbox . selection . text ( element );","title":"selection()"},{"location":"CEP-export/listbox/#onselect-eventlistener","text":"element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . detail ); });","title":"onSelect eventlistener"},{"location":"CEP-export/listbox/#real-world-examples","text":"","title":"Real world examples"},{"location":"CEP-export/listbox/#add-an-item","text":"var listbox = SDB . id ( 1 ); var addedItems = SDB . Listbox . add ( listbox , [ 'Item 1' , 'Item 2' , 'Item 3' ] ); console . log ( addedItems );","title":"Add an item"},{"location":"CEP-export/listbox/#populate-with-an-array","text":"var listbox = SDB . id ( 1 ); var addedItems = SDB . Listbox . add ( listbox , [ 'Item 1' , 'Item 2' , 'Item 3' ] ); console . log ( addedItems );","title":"Populate with an array"},{"location":"CEP-export/listbox/#select-item-if-text-is-equal-to","text":"SDB . Listbox . select ( SDB . id ( 1 ), 'Item 2' );","title":"Select item if text is equal to"},{"location":"CEP-export/listbox/#fetch-all-selected-items","text":"SDB . Listbox . selection . text ( SDB . id ( 1 ) );","title":"Fetch all selected items"},{"location":"CEP-export/listbox/#deselect-all","text":"var listbox = SDB . id ( 1 ); SDB . Listbox . deselectAll ( listbox );","title":"Deselect all"},{"location":"CEP-export/listbox/#select-all-items-with-the-click-of-a-button","text":"var listbox = SDB . id ( 1 ); var listboxItems = pickAll ( 'li' , listbox ); var button = SDB . id ( 2 ); button . addEventListener ( \"click\" , function () { for ( var item of listboxItems ) { item . classList . add ( 'selected' ); } });","title":"Select all items with the click of a button"},{"location":"CEP-export/listbox/#how-to-disable-listbox-items","text":"To disable listbox items, you need to get a bit tricky. You can't use SDB . disable . id or SDB . disable . name because Listbox items don't have either. Also there is no method for disabling with index. The only thing left is the SDB . disable . element () , which may also be difficult since they don't have any distinct hooks you can latch onto. The snippet below gets the element based on its index. If you're populating the listbox yourself, you could easily scatter around classes and/or data-attributes that you can target later on for disabling purposes or something else. This snippet disables the second item in the specified list. var listBox = SDB . id ( 1 ); var listItem2 = selectAll ( 'li' , listBox )[ 1 ]; SDB . disable . element ( listItem2 );","title":"How to disable listbox items?"},{"location":"CEP-export/listbox/#html-structure","text":"The HTML might be slightly cleaned up to make it easier to to read. < div class = \"list-box\" data-item-type = \"listbox\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"inner-wrap\" > < ul > < li class = \"selected\" >< span > Item 1 </ span ></ li > < li >< span > Item 2 </ span ></ li > </ ul > </ div > </ div >","title":"HTML structure"},{"location":"CEP-export/radiocheck/","text":"Radiobutton & Checkbox \u00b6 Methods \u00b6 For convenience sake these methods work with any of these 3 namespaces: Radiocheck , Radiobutton and Checkbox . It doesn't matter to me, but for your own sanity, you'll likely want to use Radiobutton for radiobuttons and Checkbox for checkboxes... or the more neutral Radiocheck for either. Choice is yours. toggle() \u00b6 SDB . Radiocheck . toggle ( element ); // Toggles a radiobutton/checkbox check() \u00b6 SDB . Radiocheck . check ( element ); // Checks a radiobutton/checkbox uncheck() \u00b6 SDB . Radiocheck . uncheck ( element ); // Unchecks a radiobutton/checkbox checked() \u00b6 SDB . Radiocheck . checked ( element ); // Returns a radiobutton/checkbox state (boolean) value() \u00b6 SDB . Radiocheck . value ( element ); // Exactly the same as the method above onCheck eventListener \u00b6 Despite the name, it's not just for \"checking\" but for \"unchecking\" too. element . addEventListener ( \"onCheck\" , function ( e ) { console . log ( e . target ); console . log ( e . detail ); }); Real world examples \u00b6 Check it real good \u00b6 Check a radiobutton or checkbox. It doesn't matter which of these you use. SDB . Radiocheck . check ( SDB . id ( 1 ) ); SDB . Radiobutton . check ( SDB . id ( 1 ) ); SDB . Checkbox . check ( SDB . id ( 1 ) ); Fetch all checked checkboxes. \u00b6 No need for > . padding - box > if you're not worried of nesting. selectAll ( '[data-item-name=\"panelOfJudges\"] > .padding-box > [data-item-type=\"checkbox\"] .radiocheck.checked' ); Check another item onCheck \u00b6 Toggle another checkbox when onCheck event is triggered SDB . id ( 1 ). addEventListener ( \"onCheck\" , function () { SDB . Radiocheck . toggle ( SDB . id ( 2 ) ); }); Disable checkbox \u00b6 SDB . disable ( 1 ); HTML structure \u00b6 Radiobuttons and Checkboxes have a child element with the class .radiocheck + .checkbox or .radiobutton . So don't try to select either with just the class .radiobutton or .checkbox . Use [ data - item - id ] or [ data - item - type ] with or without the class. Checkbox \u00b6 The HTML might be slightly cleaned up to make it easier to to read. < div class = \"checkbox\" data-item-type = \"checkbox\" data-item-id = \"8\" data-item-parent-id = \"1\" > < div class = \"radiocheck checkbox on checked\" >< svg ></ svg ></ div > < label > Reverse Page Order </ label > </ div > Radiobutton \u00b6 The HTML might be slightly cleaned up to make it easier to to read. < div class = \"radiobutton\" data-item-type = \"radiobutton\" data-item-id = \"22\" data-item-parent-id = \"0\" > < div class = \"radiocheck radiobutton on checked\" >< svg ></ svg ></ div > < label > RadioButton </ label > </ div >","title":"Radiobutton & Checkbox"},{"location":"CEP-export/radiocheck/#radiobutton-checkbox","text":"","title":"Radiobutton &amp; Checkbox"},{"location":"CEP-export/radiocheck/#methods","text":"For convenience sake these methods work with any of these 3 namespaces: Radiocheck , Radiobutton and Checkbox . It doesn't matter to me, but for your own sanity, you'll likely want to use Radiobutton for radiobuttons and Checkbox for checkboxes... or the more neutral Radiocheck for either. Choice is yours.","title":"Methods"},{"location":"CEP-export/radiocheck/#toggle","text":"SDB . Radiocheck . toggle ( element ); // Toggles a radiobutton/checkbox","title":"toggle()"},{"location":"CEP-export/radiocheck/#check","text":"SDB . Radiocheck . check ( element ); // Checks a radiobutton/checkbox","title":"check()"},{"location":"CEP-export/radiocheck/#uncheck","text":"SDB . Radiocheck . uncheck ( element ); // Unchecks a radiobutton/checkbox","title":"uncheck()"},{"location":"CEP-export/radiocheck/#checked","text":"SDB . Radiocheck . checked ( element ); // Returns a radiobutton/checkbox state (boolean)","title":"checked()"},{"location":"CEP-export/radiocheck/#value","text":"SDB . Radiocheck . value ( element ); // Exactly the same as the method above","title":"value()"},{"location":"CEP-export/radiocheck/#oncheck-eventlistener","text":"Despite the name, it's not just for \"checking\" but for \"unchecking\" too. element . addEventListener ( \"onCheck\" , function ( e ) { console . log ( e . target ); console . log ( e . detail ); });","title":"onCheck eventListener"},{"location":"CEP-export/radiocheck/#real-world-examples","text":"","title":"Real world examples"},{"location":"CEP-export/radiocheck/#check-it-real-good","text":"Check a radiobutton or checkbox. It doesn't matter which of these you use. SDB . Radiocheck . check ( SDB . id ( 1 ) ); SDB . Radiobutton . check ( SDB . id ( 1 ) ); SDB . Checkbox . check ( SDB . id ( 1 ) );","title":"Check it real good"},{"location":"CEP-export/radiocheck/#fetch-all-checked-checkboxes","text":"No need for > . padding - box > if you're not worried of nesting. selectAll ( '[data-item-name=\"panelOfJudges\"] > .padding-box > [data-item-type=\"checkbox\"] .radiocheck.checked' );","title":"Fetch all checked checkboxes."},{"location":"CEP-export/radiocheck/#check-another-item-oncheck","text":"Toggle another checkbox when onCheck event is triggered SDB . id ( 1 ). addEventListener ( \"onCheck\" , function () { SDB . Radiocheck . toggle ( SDB . id ( 2 ) ); });","title":"Check another item onCheck"},{"location":"CEP-export/radiocheck/#disable-checkbox","text":"SDB . disable ( 1 );","title":"Disable checkbox"},{"location":"CEP-export/radiocheck/#html-structure","text":"Radiobuttons and Checkboxes have a child element with the class .radiocheck + .checkbox or .radiobutton . So don't try to select either with just the class .radiobutton or .checkbox . Use [ data - item - id ] or [ data - item - type ] with or without the class.","title":"HTML structure"},{"location":"CEP-export/radiocheck/#checkbox","text":"The HTML might be slightly cleaned up to make it easier to to read. < div class = \"checkbox\" data-item-type = \"checkbox\" data-item-id = \"8\" data-item-parent-id = \"1\" > < div class = \"radiocheck checkbox on checked\" >< svg ></ svg ></ div > < label > Reverse Page Order </ label > </ div >","title":"Checkbox"},{"location":"CEP-export/radiocheck/#radiobutton","text":"The HTML might be slightly cleaned up to make it easier to to read. < div class = \"radiobutton\" data-item-type = \"radiobutton\" data-item-id = \"22\" data-item-parent-id = \"0\" > < div class = \"radiocheck radiobutton on checked\" >< svg ></ svg ></ div > < label > RadioButton </ label > </ div >","title":"Radiobutton"},{"location":"CEP-export/tabbedpanel/","text":"Tabbedpanel \u00b6 Methods \u00b6 select() \u00b6 SDB . Tabbedpanel . select . index ( element , index ); // Selects a tab using its index SDB . Tabbedpanel . select . id ( element , id ); // Selects a tab using a id onSelect eventListener \u00b6 Target element should be a .tabbed-panel . element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . detail ); }); Real world examples \u00b6 Select a tab using its index \u00b6 Select tab number 4 SDB . Tabbedpanel . select . index ( SDB . id ( 2 ), 5 ); Select a tab using its ID \u00b6 Select tab with the id 4 SDB . Tabbedpanel . select . id ( SDB . id ( 2 ), 4 ); Disable element if tab is activated \u00b6 Disable item with the name Charles if tab #2 of TammyTabs is selected var tabbedPanel = SDB . name ( 'TammyTabs' ); tabbedPanel . addEventListener ( \"onSelect\" , function ( e ) { var tabIndex = e . detail . selected . index ; var action = tabIndex === 1 ? 'disable' : 'enable' ; SDB [ action ]. name ( 'Charles' ); }); HTML structure \u00b6 The HTML might be slightly cleaned up to make it easier to to read. Expand code here < div class = \"panel tabbed-panel\" data-parent = \"true\" data-item-type = \"tabbedpanel\" data-item-name = \"tabbyTheTabbedPanel\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"tab-container\" > < div class = \"tab currently-active-tab visible\" data-tab-id = \"2\" contenteditable = \"\" > Tab1 </ div > < div class = \"tab\" data-tab-id = \"3\" contenteditable = \"\" > Tab2 </ div > </ div > < div class = \"padding-box\" > < style class = \"margins\" > # dialog [ data-item-id = \"1\" ]> . padding-box > . tab > . padding-box { padding : 10 px 10 px 10 px 10 px ; } </ style > < div class = \"panel tab orientation-column align-children-horizontal-left align-children-vertical-top active visible-tab\" data-parent = \"true\" data-item-type = \"tab\" data-item-name = \"tab1\" data-item-id = \"2\" data-item-parent-id = \"1\" > < div class = \"padding-box\" > < style class = \"spacing\" > # dialog [ data-item-id = \"2\" ] . orientation-row > . padding-box > div { padding-left : 10 px ; } # dialog [ data-item-id = \"2\" ] . orientation-row > . padding-box > div : first-of-type { padding-left : 0 px ; } # dialog [ data-item-id = \"2\" ] . orientation-column > . padding-box > div { padding-top : 10 px ; } # dialog [ data-item-id = \"2\" ] . orientation-column > . padding-box > div : first-of-type { padding-top : 0 px ; } </ style > < div class = \"edit-text disable-soft-wrap\" data-item-type = \"edittext\" data-item-name = \"text1\" data-item-id = \"4\" data-item-parent-id = \"2\" > < span class = \"edit-text-inner-wrap\" > < span class = \"text-container\" contenteditable = \"true\" > EditText </ span > </ span > </ div > </ div > </ div > < div class = \"panel tab orientation-column align-children-horizontal-left align-children-vertical-top\" data-parent = \"true\" data-item-type = \"tab\" data-item-name = \"tab2\" data-item-id = \"3\" data-item-parent-id = \"1\" > < div class = \"padding-box\" > < style class = \"spacing\" > # dialog [ data-item-id = \"3\" ] . orientation-row > . padding-box > div { padding-left : 10 px ; } # dialog [ data-item-id = \"3\" ] . orientation-row > . padding-box > div : first-of-type { padding-left : 0 px ; } # dialog [ data-item-id = \"3\" ] . orientation-column > . padding-box > div { padding-top : 10 px ; } # dialog [ data-item-id = \"3\" ] . orientation-column > . padding-box > div : first-of-type { padding-top : 0 px ; } </ style > < div class = \"button justify-center\" data-item-type = \"button\" data-item-name = \"buthon\" data-item-id = \"5\" data-item-parent-id = \"3\" > < div class = \"button-border\" > < span class = \"text-container\" contenteditable = \"false\" > Button </ span > </ div > </ div > </ div > </ div > </ div > </ div >","title":"Tabbedpanel"},{"location":"CEP-export/tabbedpanel/#tabbedpanel","text":"","title":"Tabbedpanel"},{"location":"CEP-export/tabbedpanel/#methods","text":"","title":"Methods"},{"location":"CEP-export/tabbedpanel/#select","text":"SDB . Tabbedpanel . select . index ( element , index ); // Selects a tab using its index SDB . Tabbedpanel . select . id ( element , id ); // Selects a tab using a id","title":"select()"},{"location":"CEP-export/tabbedpanel/#onselect-eventlistener","text":"Target element should be a .tabbed-panel . element . addEventListener ( \"onSelect\" , function ( e ) { console . log ( e . detail ); });","title":"onSelect eventListener"},{"location":"CEP-export/tabbedpanel/#real-world-examples","text":"","title":"Real world examples"},{"location":"CEP-export/tabbedpanel/#select-a-tab-using-its-index","text":"Select tab number 4 SDB . Tabbedpanel . select . index ( SDB . id ( 2 ), 5 );","title":"Select a tab using its index"},{"location":"CEP-export/tabbedpanel/#select-a-tab-using-its-id","text":"Select tab with the id 4 SDB . Tabbedpanel . select . id ( SDB . id ( 2 ), 4 );","title":"Select a tab using its ID"},{"location":"CEP-export/tabbedpanel/#disable-element-if-tab-is-activated","text":"Disable item with the name Charles if tab #2 of TammyTabs is selected var tabbedPanel = SDB . name ( 'TammyTabs' ); tabbedPanel . addEventListener ( \"onSelect\" , function ( e ) { var tabIndex = e . detail . selected . index ; var action = tabIndex === 1 ? 'disable' : 'enable' ; SDB [ action ]. name ( 'Charles' ); });","title":"Disable element if tab is activated"},{"location":"CEP-export/tabbedpanel/#html-structure","text":"The HTML might be slightly cleaned up to make it easier to to read. Expand code here < div class = \"panel tabbed-panel\" data-parent = \"true\" data-item-type = \"tabbedpanel\" data-item-name = \"tabbyTheTabbedPanel\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"tab-container\" > < div class = \"tab currently-active-tab visible\" data-tab-id = \"2\" contenteditable = \"\" > Tab1 </ div > < div class = \"tab\" data-tab-id = \"3\" contenteditable = \"\" > Tab2 </ div > </ div > < div class = \"padding-box\" > < style class = \"margins\" > # dialog [ data-item-id = \"1\" ]> . padding-box > . tab > . padding-box { padding : 10 px 10 px 10 px 10 px ; } </ style > < div class = \"panel tab orientation-column align-children-horizontal-left align-children-vertical-top active visible-tab\" data-parent = \"true\" data-item-type = \"tab\" data-item-name = \"tab1\" data-item-id = \"2\" data-item-parent-id = \"1\" > < div class = \"padding-box\" > < style class = \"spacing\" > # dialog [ data-item-id = \"2\" ] . orientation-row > . padding-box > div { padding-left : 10 px ; } # dialog [ data-item-id = \"2\" ] . orientation-row > . padding-box > div : first-of-type { padding-left : 0 px ; } # dialog [ data-item-id = \"2\" ] . orientation-column > . padding-box > div { padding-top : 10 px ; } # dialog [ data-item-id = \"2\" ] . orientation-column > . padding-box > div : first-of-type { padding-top : 0 px ; } </ style > < div class = \"edit-text disable-soft-wrap\" data-item-type = \"edittext\" data-item-name = \"text1\" data-item-id = \"4\" data-item-parent-id = \"2\" > < span class = \"edit-text-inner-wrap\" > < span class = \"text-container\" contenteditable = \"true\" > EditText </ span > </ span > </ div > </ div > </ div > < div class = \"panel tab orientation-column align-children-horizontal-left align-children-vertical-top\" data-parent = \"true\" data-item-type = \"tab\" data-item-name = \"tab2\" data-item-id = \"3\" data-item-parent-id = \"1\" > < div class = \"padding-box\" > < style class = \"spacing\" > # dialog [ data-item-id = \"3\" ] . orientation-row > . padding-box > div { padding-left : 10 px ; } # dialog [ data-item-id = \"3\" ] . orientation-row > . padding-box > div : first-of-type { padding-left : 0 px ; } # dialog [ data-item-id = \"3\" ] . orientation-column > . padding-box > div { padding-top : 10 px ; } # dialog [ data-item-id = \"3\" ] . orientation-column > . padding-box > div : first-of-type { padding-top : 0 px ; } </ style > < div class = \"button justify-center\" data-item-type = \"button\" data-item-name = \"buthon\" data-item-id = \"5\" data-item-parent-id = \"3\" > < div class = \"button-border\" > < span class = \"text-container\" contenteditable = \"false\" > Button </ span > </ div > </ div > </ div > </ div > </ div > </ div >","title":"HTML structure"},{"location":"CEP-export/thememanager/","text":"Theme Manager \u00b6 Theme manager changes the theme color automatically based on the app interface color. You need to manually add this SDB . themeManager . init ( csinterface ); after wherever you define CSInterface and provide it as a parameter. Something like this: var csi = new CSInterface (); SDB . themeManager . init ( csi );","title":"Theme Manager"},{"location":"CEP-export/thememanager/#theme-manager","text":"Theme manager changes the theme color automatically based on the app interface color. You need to manually add this SDB . themeManager . init ( csinterface ); after wherever you define CSInterface and provide it as a parameter. Something like this: var csi = new CSInterface (); SDB . themeManager . init ( csi );","title":"Theme Manager"},{"location":"CEP-export/treeview/","text":"Treeview \u00b6 Methods \u00b6 add() \u00b6 The element can be either .tree-view or .tree-view-item . Target element = .tree-view or .tree-view-item . SDB . Treeview . add ( element , 'string' ); // returns the added element. You can also feed it an array, in which case it adds multiple items. Target element = .tree-view or .tree-view-item . SDB . Treeview . add ( element , [ 'string 1' , 'string 2' ] ); // returns the added element. Exported .tree-view-item elements will have all kinds of data - attributes but this method doesn't add any of them. Note Each item is given a new: data - tree - item - id attribute so you can hook into that if necessary. This is is unique in the scope of the .tree-view . Meaning that you can have any number of .tree-view items with identical amount of items and they all contains the same ids. So be sure to target the specific .tree-view when using these IDs. remove() \u00b6 Target element = .tree-view-item . SDB . Treeview . remove ( element ); expand() \u00b6 Show child elements. Target element = .tree-view-item . SDB . Treeview . expand ( element ); collapse() \u00b6 Hide child elements. Target element = .tree-view-item . SDB . Treeview . collapse ( element ); text() \u00b6 Retrieve text from the specified item. Target element = .tree-view-item . SDB . Treeview . collapse ( element ); empty() \u00b6 Empties the whole treeview or node, so the target element can be either .tree-view or .tree-node . SDB . Treeview . empty ( element ); expandAll() \u00b6 Target element can be .tree-view or .tree-view-item ; SDB . TreeView . expandAll ( element ); // Returns an array with the expanded nodes collapseAll() \u00b6 Target element can be .tree-view or .tree-view-item ; SDB . TreeView . collapseAll ( element ); // Returns an array with the collapsed nodes onClick eventListener \u00b6 Always attached to the .tree-view element. Never to .tree-view-item . element . addEventListener ( 'onClick' , function ( e ) { console . log ( e . detail ); }); Real world examples \u00b6 Add new item & expand \u00b6 Tree view items can be expanded before any child items are added... var treeview = SDB . id ( 1 ); var node = SDB . Treeview . add ( treeview , 'New item' ); SDB . Treeview . expand ( node ); Add new item inside another \u00b6 In this case, since the add () method returns the added item, we are using the variable defined in the previous code block above. To make an item a parent (node), you don't need to prepare it in any way. Just add a new item. Also in this example I added a new class... The node variable is defined in the first example under the heading: Add new item & expand . SDB . Treeview . add ( node , 'Another item)' ). classList . add ( 'remove-on-click' ); Custom onClick event \u00b6 This can only be attached to the treeview element: .tree-view . It can't be attached to .tree-view-item elements. Continuing from the last 2 examples, we check if the clicked item has a class remove - on - click and if it does, the item is removed when clicked. Here I'm using item . remove (); instead of SDB . Treeview . remove ( item ); . Either one will work just fine. The latter method has an added check to see it is a .tree-view-item , but otherwise it's the same. The treeview is defined in the first example under the heading: Add new item & expand . treeview . addEventListener ( 'onClick' , function ( e ) { var item = e . detail . element ; if ( item . classList . contains ( 'remove-on-click' ) ) { item . remove (); } }); Remove item \u00b6 Each tree item has a unique id data - tree - item - id within the scope of its parent treeview. This probably your best bet if you need to target a specific node and you didn't get a chance to store it in a variable when added. pick ( '[data-tree-item-id=\"1\"]' , treeview ). remove (); Data-attribute \u00b6 Each tree item has a unique id data - tree - item - id within the scope of its parent treeview. This probably your best bet if you need to target a specific node and you didn't get a chance to store it in a variable when added. SDB . Treeview . add ( pick ( '[data-tree-item-id=\"3\"]' , treeview ), 'New item' ); Populating with an array \u00b6 First item of each array becomes a parent (tree-node). This is the output . var itemList = [ 'List (A)' , // This becomes a node 'List (A1)' , [ 'List (A2)' , // This becomes a node 'List (B1)' , 'List (B2)' , [ 'List (B3)' , // This becomes a node 'List (C1)' , 'List (C2)' , 'List (C3)' , 'List (C4)' , 'List (C5)' , 'List (C6)' , 'List (C7)' , 'List (C8)' ] ], 'List (A3)' ]; var treeview = SDB . id ( 1 ); SDB . Treeview . add ( treeview , itemList ); Populating with an array #2 \u00b6 Same thing as before except to preserve the first level, each item of that first level is added separately using for loop. First item of each array becomes a parent (tree-node), but doing it this way makes an exception for the first level. This is the output . var itemList = [ 'List (A1)' , 'List (A2)' , [ 'List (A3)' , // This becomes a node 'List (B1)' , 'List (B2)' , [ 'List (B3)' , // This becomes a node 'List (C1)' , 'List (C2)' , 'List (C3)' , 'List (C4)' , 'List (C5)' , 'List (C6)' , 'List (C7)' , 'List (C8)' ] ], 'List (A4)' ]; var treeview = SDB . id ( 1 ); for ( var text of itemList ) { SDB . Treeview . add ( treeview , text ); } Expand Everything \u00b6 Target element can be .tree-view or .tree-view-item ; var treeview = SDB . id ( 1 ); var expandedNodes = SDB . Treeview . expandAll ( treeview ); Collapse at a specific node \u00b6 var treeview = SDB . id ( 1 ); var node = pick ( '[data-tree-item-id=\"1\"]' , treeview ); var collapsedNodes = SDB . Treeview . collapseAll ( node ); Empty a node \u00b6 When a node is emptied, it loses the little chevron. SDB . Treeview . empty ( pick ( '[data-tree-item-id=\"2\"]' ) ); HTML structure \u00b6 I made some manual changes to the HTML to make it more readable. All parent tree items are marked with ( node ) in the comments. Classes Description .tree-node Every time . tree-view-item has the class . tree-node it has at least one child item. .expanded Children are hidden by default. This class makes them visible. Simplified HTML \u00b6 Where it says Item text lives here , there's actually two child span elements there. < div class = \"panel tree-view\" > < div class = \"padding-box\" > <!-- Item 1 --> < div class = \"tree-view-item\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Item 2 (node)--> < div class = \"tree-view-item tree-node expanded\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" > <!-- Item 3--> < div class = \"tree-view-item\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Item 2 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Treeview--> Full HTML \u00b6 Expand code here < div class = \"panel tree-view\" data-parent = \"true\" data-item-type = \"treeview\" data-item-name = \"treeView1\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"padding-box\" > <!-- Tree item 1 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem1\" data-item-id = \"2\" data-item-parent-id = \"1\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 2 (node)--> < div class = \"tree-view-item tree-node\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem2\" data-item-id = \"4\" data-item-parent-id = \"2\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span ></ div > < div class = \"padding-box\" > <!-- Tree item 3 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem3\" data-item-id = \"5\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Tree item 4 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem4\" data-item-id = \"6\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 5 --> < div class = \"tree-view-item active\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem5\" data-item-id = \"9\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 4 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 2 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 1 (node)--> <!-- Tree item 6 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem6\" data-item-id = \"3\" data-item-parent-id = \"1\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 7 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem7\" data-item-id = \"7\" data-item-parent-id = \"3\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Tree item 8 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem8\" data-item-id = \"8\" data-item-parent-id = \"7\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 6 (node) --> </ div > <!-- / .padding-box--> </ div > <!-- / Treeview -->","title":"Treeview"},{"location":"CEP-export/treeview/#treeview","text":"","title":"Treeview"},{"location":"CEP-export/treeview/#methods","text":"","title":"Methods"},{"location":"CEP-export/treeview/#add","text":"The element can be either .tree-view or .tree-view-item . Target element = .tree-view or .tree-view-item . SDB . Treeview . add ( element , 'string' ); // returns the added element. You can also feed it an array, in which case it adds multiple items. Target element = .tree-view or .tree-view-item . SDB . Treeview . add ( element , [ 'string 1' , 'string 2' ] ); // returns the added element. Exported .tree-view-item elements will have all kinds of data - attributes but this method doesn't add any of them. Note Each item is given a new: data - tree - item - id attribute so you can hook into that if necessary. This is is unique in the scope of the .tree-view . Meaning that you can have any number of .tree-view items with identical amount of items and they all contains the same ids. So be sure to target the specific .tree-view when using these IDs.","title":"add()"},{"location":"CEP-export/treeview/#remove","text":"Target element = .tree-view-item . SDB . Treeview . remove ( element );","title":"remove()"},{"location":"CEP-export/treeview/#expand","text":"Show child elements. Target element = .tree-view-item . SDB . Treeview . expand ( element );","title":"expand()"},{"location":"CEP-export/treeview/#collapse","text":"Hide child elements. Target element = .tree-view-item . SDB . Treeview . collapse ( element );","title":"collapse()"},{"location":"CEP-export/treeview/#text","text":"Retrieve text from the specified item. Target element = .tree-view-item . SDB . Treeview . collapse ( element );","title":"text()"},{"location":"CEP-export/treeview/#empty","text":"Empties the whole treeview or node, so the target element can be either .tree-view or .tree-node . SDB . Treeview . empty ( element );","title":"empty()"},{"location":"CEP-export/treeview/#expandall","text":"Target element can be .tree-view or .tree-view-item ; SDB . TreeView . expandAll ( element ); // Returns an array with the expanded nodes","title":"expandAll()"},{"location":"CEP-export/treeview/#collapseall","text":"Target element can be .tree-view or .tree-view-item ; SDB . TreeView . collapseAll ( element ); // Returns an array with the collapsed nodes","title":"collapseAll()"},{"location":"CEP-export/treeview/#onclick-eventlistener","text":"Always attached to the .tree-view element. Never to .tree-view-item . element . addEventListener ( 'onClick' , function ( e ) { console . log ( e . detail ); });","title":"onClick eventListener"},{"location":"CEP-export/treeview/#real-world-examples","text":"","title":"Real world examples"},{"location":"CEP-export/treeview/#add-new-item-expand","text":"Tree view items can be expanded before any child items are added... var treeview = SDB . id ( 1 ); var node = SDB . Treeview . add ( treeview , 'New item' ); SDB . Treeview . expand ( node );","title":"Add new item &amp; expand"},{"location":"CEP-export/treeview/#add-new-item-inside-another","text":"In this case, since the add () method returns the added item, we are using the variable defined in the previous code block above. To make an item a parent (node), you don't need to prepare it in any way. Just add a new item. Also in this example I added a new class... The node variable is defined in the first example under the heading: Add new item & expand . SDB . Treeview . add ( node , 'Another item)' ). classList . add ( 'remove-on-click' );","title":"Add new item inside another"},{"location":"CEP-export/treeview/#custom-onclick-event","text":"This can only be attached to the treeview element: .tree-view . It can't be attached to .tree-view-item elements. Continuing from the last 2 examples, we check if the clicked item has a class remove - on - click and if it does, the item is removed when clicked. Here I'm using item . remove (); instead of SDB . Treeview . remove ( item ); . Either one will work just fine. The latter method has an added check to see it is a .tree-view-item , but otherwise it's the same. The treeview is defined in the first example under the heading: Add new item & expand . treeview . addEventListener ( 'onClick' , function ( e ) { var item = e . detail . element ; if ( item . classList . contains ( 'remove-on-click' ) ) { item . remove (); } });","title":"Custom onClick event"},{"location":"CEP-export/treeview/#remove-item","text":"Each tree item has a unique id data - tree - item - id within the scope of its parent treeview. This probably your best bet if you need to target a specific node and you didn't get a chance to store it in a variable when added. pick ( '[data-tree-item-id=\"1\"]' , treeview ). remove ();","title":"Remove item"},{"location":"CEP-export/treeview/#data-attribute","text":"Each tree item has a unique id data - tree - item - id within the scope of its parent treeview. This probably your best bet if you need to target a specific node and you didn't get a chance to store it in a variable when added. SDB . Treeview . add ( pick ( '[data-tree-item-id=\"3\"]' , treeview ), 'New item' );","title":"Data-attribute"},{"location":"CEP-export/treeview/#populating-with-an-array","text":"First item of each array becomes a parent (tree-node). This is the output . var itemList = [ 'List (A)' , // This becomes a node 'List (A1)' , [ 'List (A2)' , // This becomes a node 'List (B1)' , 'List (B2)' , [ 'List (B3)' , // This becomes a node 'List (C1)' , 'List (C2)' , 'List (C3)' , 'List (C4)' , 'List (C5)' , 'List (C6)' , 'List (C7)' , 'List (C8)' ] ], 'List (A3)' ]; var treeview = SDB . id ( 1 ); SDB . Treeview . add ( treeview , itemList );","title":"Populating with an array"},{"location":"CEP-export/treeview/#populating-with-an-array-2","text":"Same thing as before except to preserve the first level, each item of that first level is added separately using for loop. First item of each array becomes a parent (tree-node), but doing it this way makes an exception for the first level. This is the output . var itemList = [ 'List (A1)' , 'List (A2)' , [ 'List (A3)' , // This becomes a node 'List (B1)' , 'List (B2)' , [ 'List (B3)' , // This becomes a node 'List (C1)' , 'List (C2)' , 'List (C3)' , 'List (C4)' , 'List (C5)' , 'List (C6)' , 'List (C7)' , 'List (C8)' ] ], 'List (A4)' ]; var treeview = SDB . id ( 1 ); for ( var text of itemList ) { SDB . Treeview . add ( treeview , text ); }","title":"Populating with an array #2"},{"location":"CEP-export/treeview/#expand-everything","text":"Target element can be .tree-view or .tree-view-item ; var treeview = SDB . id ( 1 ); var expandedNodes = SDB . Treeview . expandAll ( treeview );","title":"Expand Everything"},{"location":"CEP-export/treeview/#collapse-at-a-specific-node","text":"var treeview = SDB . id ( 1 ); var node = pick ( '[data-tree-item-id=\"1\"]' , treeview ); var collapsedNodes = SDB . Treeview . collapseAll ( node );","title":"Collapse at a specific node"},{"location":"CEP-export/treeview/#empty-a-node","text":"When a node is emptied, it loses the little chevron. SDB . Treeview . empty ( pick ( '[data-tree-item-id=\"2\"]' ) );","title":"Empty a node"},{"location":"CEP-export/treeview/#html-structure","text":"I made some manual changes to the HTML to make it more readable. All parent tree items are marked with ( node ) in the comments. Classes Description .tree-node Every time . tree-view-item has the class . tree-node it has at least one child item. .expanded Children are hidden by default. This class makes them visible.","title":"HTML structure"},{"location":"CEP-export/treeview/#simplified-html","text":"Where it says Item text lives here , there's actually two child span elements there. < div class = \"panel tree-view\" > < div class = \"padding-box\" > <!-- Item 1 --> < div class = \"tree-view-item\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Item 2 (node)--> < div class = \"tree-view-item tree-node expanded\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" > <!-- Item 3--> < div class = \"tree-view-item\" > < div class = \"item-wrap\" > <!-- Item text lives here --> </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Item 2 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Treeview-->","title":"Simplified HTML"},{"location":"CEP-export/treeview/#full-html","text":"Expand code here < div class = \"panel tree-view\" data-parent = \"true\" data-item-type = \"treeview\" data-item-name = \"treeView1\" data-item-id = \"1\" data-item-parent-id = \"0\" > < div class = \"padding-box\" > <!-- Tree item 1 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem1\" data-item-id = \"2\" data-item-parent-id = \"1\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 2 (node)--> < div class = \"tree-view-item tree-node\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem2\" data-item-id = \"4\" data-item-parent-id = \"2\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span ></ div > < div class = \"padding-box\" > <!-- Tree item 3 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem3\" data-item-id = \"5\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Tree item 4 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem4\" data-item-id = \"6\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 5 --> < div class = \"tree-view-item active\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem5\" data-item-id = \"9\" data-item-parent-id = \"4\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 4 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 2 (node)--> </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 1 (node)--> <!-- Tree item 6 (node)--> < div class = \"tree-view-item tree-node expanded\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem6\" data-item-id = \"3\" data-item-parent-id = \"1\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" > <!-- Tree item 7 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem7\" data-item-id = \"7\" data-item-parent-id = \"3\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > <!-- Tree item 8 --> < div class = \"tree-view-item\" data-parent = \"true\" data-item-type = \"treeitem\" data-item-name = \"tvItem8\" data-item-id = \"8\" data-item-parent-id = \"7\" > < div class = \"item-wrap\" > < span class = \"tree-view-arrow\" >< svg ></ svg ></ span > < span class = \"text-container\" contenteditable = \"false\" > TreeItem </ span > </ div > < div class = \"padding-box\" ></ div > </ div > </ div > <!-- / .padding-box--> </ div > <!-- / Tree item 6 (node) --> </ div > <!-- / .padding-box--> </ div > <!-- / Treeview -->","title":"Full HTML"}]}